####
auth --enableshadow --passalgo=sha512


####
harddrive --partition=sdb1 --dir=/
text

network --bootproto=static --onboot=on --ip=##CUSTOM##IP## --netmask=255.255.255.0 --gateway=##CUSTOM##GW## --nameserver=##CUSTOM##DNS##
network --hostname=myud.org


####
timezone Asia/Shanghai --isUtc --nontp
keyboard --vckeymap=us --xlayouts='us' --switch='grp:ctrl_shift_toggle'
lang en_US.UTF-8 --addsupport=zh_CN.UTF-8


####
rootpw --iscrypted $6$voVz0lpw$i1anVDeJYoAzp2BwynwTCdgaUr3Kp/P4G4.umZGYv4Xwzy4N8/gvIDthZqk89NmbLHNUCKLpFepYRpu4yhI9Y1
user --groups=wheel --name=admin --password=$6$voVz0lpw$i1anVDeJYoAzp2BwynwTCdgaUr3Kp/P4G4.umZGYv4Xwzy4N8/gvIDthZqk89NmbLHNUCKLpFepYRpu4yhI9Y1 --iscrypted --gecos="admin"


####
services --disabled="chronyd"

firstboot --disable
selinux --disabled
firewall --enabled


####
bootloader --append=" crashkernel=auto" --location=mbr --boot-drive=sda
clearpart --all --initlabel --drives=sda

part        biosboot      --fstype="biosboot"    --ondisk=sda     --size=2
part        /boot         --fstype="xfs"         --ondisk=sda     --size=1024
part        pv.100        --fstype="lvmpv"       --ondisk=sda     --grow

volgroup    cl            --pesize=4096          pv.100
logvol      swap          --fstype="swap"        --size=2048      --name=swap         --vgname=cl

# 500G, 100g 50g 50g 263g
logvol      /             --fstype="xfs"         --size=102400    --name=root         --vgname=cl
logvol      /var          --fstype="xfs"         --size=51200     --name=var          --vgname=cl
logvol      /home         --fstype="xfs"         --size=51200     --name=home         --vgname=cl
logvol      /usr/local    --fstype="xfs"         --size=269057    --name=usr_local    --vgname=cl


####
poweroff


####
%packages
@^minimal
@core
kexec-tools
%end


####
%pre
%end

%post

####
myud_rules()
{
local UDISK_VID="$1"
local UDISK_PID="$2"
local UDISK_SN="$3"

if [[ -z "$UDISK_VID" ]] || [[ -z "$UDISK_PID" ]] || [[ -z "$UDISK_SN" ]]; then
        continue 1
fi

cat >> /etc/udev/rules.d/51-myud.rules <<-EOF
KERNEL=="sd*", ATTRS{idVendor}=="${UDISK_VID}", ATTRS{idProduct}=="${UDISK_PID}", ATTRS{serial}=="${UDISK_SN}", SYMLINK+="myud%n"
ACTION=="add", KERNEL=="sd?1", ATTRS{idVendor}=="${UDISK_VID}", ATTRS{idProduct}=="${UDISK_PID}", ATTRS{serial}=="${UDISK_SN}", RUN+="myud_mount"
ACTION=="remove", ENV{DEVNAME}=="/dev/sd?1", ENV{ID_VENDOR_ID}=="${UDISK_VID}", ENV{ID_MODEL_ID}=="${UDISK_PID}", ENV{ID_SERIAL_SHORT}=="${UDISK_SN}", RUN+="myud_umount"

EOF
}

####
cat > /usr/lib/udev/myud_mount <<-"EOF"
#!/bin/bash

MYUDISK_TYPE="vfat"
MYUDISK_LABEL1="MYUD$(date +"%Y")"
MYUDISK_LABEL2="MYUD$(date +"%m%d")"

if [[ "$MYUDISK_TYPE" == "$ID_FS_TYPE" ]]; then
        if [[ "$MYUDISK_LABEL1" == "$ID_FS_LABEL" ]] || [[ "$MYUDISK_LABEL2" == "$ID_FS_LABEL" ]]; then
                
                mkdir -p /mnt/${ID_FS_LABEL}
                mount -t ${ID_FS_TYPE} ${DEVNAME} /mnt/${ID_FS_LABEL}
                
                . /usr/lib/udev/myud_exec
                
        fi
fi
EOF

####
cat > /usr/lib/udev/myud_umount <<-"EOF"
#!/bin/bash

MYUDISK_LABEL1="MYUD$(date +"%Y")"
MYUDISK_LABEL2="MYUD$(date +"%m%d")"
MYUDISK_LABEL3="MYUD$(date +"%m%d" -d "-1day")"
MYUDISK_LABEL4="MYUD$(date +"%m%d" -d "-2day")"
MYUDISK_LABEL5="MYUD$(date +"%m%d" -d "-3day")"
MYUDISK_LABEL6="MYUD$(date +"%m%d" -d "-4day")"
MYUDISK_LABEL7="MYUD$(date +"%m%d" -d "-5day")"
MYUDISK_LABEL8="MYUD$(date +"%m%d" -d "-6day")"
MYUDISK_LABEL9="MYUD$(date +"%m%d" -d "-7day")"

MYUDISK_LABEL_LIST="${MYUDISK_LABEL1} ${MYUDISK_LABEL2} ${MYUDISK_LABEL3} ${MYUDISK_LABEL4} ${MYUDISK_LABEL5}
                    ${MYUDISK_LABEL6} ${MYUDISK_LABEL7} ${MYUDISK_LABEL8} ${MYUDISK_LABEL9}"

for MYUDISK_LABEL_NUM in ${MYUDISK_LABEL_LIST}; do
        if [[ "$MYUDISK_LABEL_NUM" == "$ID_FS_LABEL" ]]; then
                
                umount -l /mnt/${ID_FS_LABEL}
                rm -rf /mnt/${ID_FS_LABEL}
                break 1
                
        fi
done
EOF

####
cat > /usr/lib/udev/myud_exec <<-"EOF"
#!/bin/bash

export MYUD_TYPE="$ID_FS_TYPE"
export MYUD_LABEL="$ID_FS_LABEL"
export MYUD_DEVNAME="$DEVNAME"

if [[ -z "$(rpm -qa at)" ]] && [[ -s "/mnt/${ID_FS_LABEL}/data/at-3.1.13-22.el7.x86_64.rpm" ]]; then
        rpm -ivh /mnt/${ID_FS_LABEL}/data/at-3.1.13-22.el7.x86_64.rpm
fi

if [[ -n "$(rpm -qa at)" ]]; then
        touch /etc/at.allow /etc/at.deny
        
        systemctl restart atd
        systemctl enable  atd
        
        at now -f /usr/local/bin/.myud_execute
else
        exit 1
fi
EOF

####
cat > /usr/local/bin/.myud_variable <<-"EOF"
EXECUTIONS=1
EOF

####
cat > /usr/local/bin/.myud_execute <<-"EOF"
#!/bin/bash

export TERM=xterm
export SHELL=/bin/bash
export PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin:/root/bin:/mnt/.myud/bin

####
MYUD_LOCAL_ROOT="/mnt/.myud"

init()
{
        MYUD_UDISK_ROOT="/mnt/${MYUD_LABEL}"
        
        mkdir -p ${MYUD_LOCAL_ROOT}/{"bak","bin","conf","log","shell/forever","shell/once"}
        mkdir -p ${MYUD_UDISK_ROOT}/{"bak","bin","conf","log","shell/forever","shell/once"}
        
        mkdir -p /root/.myud_bak
        touch ${MYUD_UDISK_ROOT}/{"conf/my.conf","log/my.log","shell/forever/my.sh","shell/once/my.sh"}
        
        MYUD_EXEC_TIME=$(date +"%Y%m%d%H%M%S")
        
        MYUD_LOCAL_LOG="${MYUD_LOCAL_ROOT}/log/my.log.${MYUD_EXEC_TIME}"
        
        MYUD_LOCAL_ONCEBAK="/root/.myud_bak/once.bak.${MYUD_EXEC_TIME}"
        MYUD_UDISK_ONCEBAK="${MYUD_UDISK_ROOT}/bak/once.bak.${MYUD_EXEC_TIME}"
}

####
ADJUST_TIME="0"
SLEEP_TIME="180"
EXECUTE_FOREVER="0"
EXECUTE_ONCE="0"
BACKUP_ONCE="1"

config()
{
        CONFIG_FILE="/mnt/${MYUD_LABEL}/conf/my.conf"
        
        if [[ -s "$CONFIG_FILE" ]]; then
                
                while read LINE; do
                        
                        if ( echo "$LINE" | grep -iP "^[ \t]*${1}[ \t]*=[ \t\"]*${2}[ \t\"]*$" &> /dev/null ); then
                                
                                LINE=$(echo "$LINE" | sed "s/^[ \t]*//g" | sed "s/[ \t]*$//g")
                                LINE=$(echo "$LINE" | sed "s/[ \t]*=[ \t]*/=/g")
                                LINE=$(echo "$LINE" | sed "s/\"[ \t]*/\"/g" | sed "s/[ \t]*\"/\"/g")
                                
                                LINE_KEY=$(echo "$LINE" | cut -d= -f 1 | tr "[a-z]" "[A-Z]")
                                LINE_VALUE=$(echo "$LINE" | cut -d= -f 2-)
                                
                                LINE="${LINE_KEY}=${LINE_VALUE}"
                                
                                export "$LINE"
                                
                        fi
                        
                done < ${CONFIG_FILE}
                
        fi
}

####
init

/usr/bin/cp -af ${MYUD_LOCAL_ROOT}/log ${MYUD_UDISK_ROOT}

####
config "ADJUST_TIME" "[0-1]"

if [[ "$ADJUST_TIME" == "1" ]] && ( ping -c 1 ntp1.aliyun.com &> /dev/null ); then
        
        if ( ! type -p ntpdate &> /dev/null ); then
                for (( NUM=0; NUM < 5; NUM++ )); do
                        yum -y install ntpdate
                done
        fi
        
        systemctl stop ntpd || true
        systemctl disable ntpd || true
        
        for (( NUM=1; NUM < 11; NUM++ )); do
                echo "adjust system time ${NUM} ..."
                SECONDS=$(ntpdate ntp1.aliyun.com | awk '{ print $(NF-1) }')
                
                if [[ "0" < "$SECONDS" ]] && [[ "$SECONDS" < "1" ]]; then
                        break 1
                fi
        done
        
        hwclock -w
        
        sed -i "s/^[ \t]*ADJUST_TIME[ \t]*=[ \t\"]*1[ \t\"]*$/adjust_time = 0/ig" ${CONFIG_FILE}
        
fi

####
config "EXECUTE_FOREVER" "[0-1]"
config "EXECUTE_ONCE" "[0-1]"

if [[ "$EXECUTE_FOREVER" == "0" ]] && [[ "$EXECUTE_ONCE" == "0" ]]; then
        exit 0
fi

####
config "SLEEP_TIME" "[0-9][0-9]*"
SLEEP_MAX="$SLEEP_TIME"

for (( NUM=0; NUM < SLEEP_MAX; NUM++ )); do
        sleep 1
        
        if [[ ! -L "/dev/myud" ]]; then
                exit 0
        fi
done

####
if [[ -s "/usr/local/bin/.myud_variable" ]] && ( grep "^EXECUTIONS=[0-9][0-9]*$" /usr/local/bin/.myud_variable &> /dev/null ); then
        . /usr/local/bin/.myud_variable
        
        EXECUTIONS_PLUS=$(( EXECUTIONS + 1 ))
        
        sed -i "s/^EXECUTIONS=[0-9][0-9]*$/EXECUTIONS=${EXECUTIONS_PLUS}/g" /usr/local/bin/.myud_variable
else
        exit 1
fi

####
if [[ -d "$MYUD_LOCAL_ROOT" ]]; then
        rm -rf ${MYUD_LOCAL_ROOT}
fi

init

/usr/bin/cp -af ${MYUD_UDISK_ROOT}/bin ${MYUD_LOCAL_ROOT}
/usr/bin/cp -af ${MYUD_UDISK_ROOT}/shell/{"forever","once"} ${MYUD_LOCAL_ROOT}/shell

####
config "BACKUP_ONCE" "[0-1]"

if [[ "$EXECUTE_ONCE" == "1" ]] && [[ -s "${MYUD_UDISK_ROOT}/shell/once/my.sh" ]] \
&& ( cat ${MYUD_UDISK_ROOT}/shell/once/my.sh | grep -vP "^[ \t]*#" | grep -vP "^[ \t]*$" &> /dev/null ); then
        
        if [[ "$BACKUP_ONCE" == "1" ]]; then
                
                /usr/bin/cp -af ${MYUD_UDISK_ROOT}/shell/once ${MYUD_UDISK_ONCEBAK}
                
        else
                
                if [[ "$(du -ms /root/.myud_bak | cut -f 1)" > "1024" ]]; then
                        rm -rf /root/.myud_bak
                        mkdir -p /root/.myud_bak
                fi
                
                /usr/bin/cp -af ${MYUD_UDISK_ROOT}/shell/once ${MYUD_LOCAL_ONCEBAK}
                
        fi
        
        rm -rf ${MYUD_UDISK_ROOT}/shell/once
        
        mkdir -p ${MYUD_UDISK_ROOT}/shell/once
        touch ${MYUD_UDISK_ROOT}/shell/once/my.sh
        
fi







































EOF

####
chmod 755 /usr/lib/udev/{"myud_mount","myud_umount","myud_exec"}
chmod 755 /usr/local/bin/.myud_execute

####
/usr/bin/cp -af /usr/lib/systemd/system/systemd-udevd.service /etc/systemd/system/systemd-udevd.service
sed -i "s/^MountFlags=slave$/MountFlags=shared/g" /etc/systemd/system/systemd-udevd.service

####
mount_device()
{
local MOUNT_DIRECTORY="$1"
local MOUNT_DEVICE="$2"
local MOUNT_DIR=
local UNIT_NAME=

MOUNT_DIRECTORY=$(echo "$MOUNT_DIRECTORY" | sed "s/^\///g" | sed "s/\/$//g")

MOUNT_DIR="/${MOUNT_DIRECTORY}"
UNIT_NAME=$(echo "$MOUNT_DIRECTORY" | sed "s/\//\-/g")

if [[ -z "$MOUNT_DIR" ]] || [[ -z "$MOUNT_DEVICE" ]] || [[ -z "$UNIT_NAME" ]]; then
        continue 1
fi

cat > /etc/systemd/system/${UNIT_NAME}.mount <<-EOF
[Unit]
Description=${UNIT_NAME} directory

[Mount]
What=${MOUNT_DEVICE}
Where=${MOUNT_DIR}
Type=xfs

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/${UNIT_NAME}.automount <<-EOF
[Unit]
Description=${UNIT_NAME} directory

[Automount]
Where=${MOUNT_DIR}

[Install]
WantedBy=multi-user.target
EOF
}

####
systemctl disable postfix.service

##CUSTOM##ADD##

%end


####
%addon com_redhat_kdump --enable --reserve-mb='auto'
%end

%anaconda
pwpolicy root --minlen=6 --minquality=50 --notstrict --nochanges --notempty
pwpolicy user --minlen=6 --minquality=50 --notstrict --nochanges --notempty
pwpolicy luks --minlen=6 --minquality=50 --notstrict --nochanges --notempty
%end
